{{#if license/header}}
{{license/header}}

{{/if}}
/**
 * Generated by the artifact generator [{{generatorName}}], version [{{artifactGeneratorVersion}}]
 * as part of artifact: [{{artifactName}}], version: [{{artifactVersion}}]
 * on '{{generatedTimestamp}}'.
 *
 * {{sourceRdfResources}}
 * The generator detected the following terms in the source vocabulary:
 *  - Classes: [{{classes.length}}]
 *  - Properties: [{{properties.length}}]
 *  - Literals: [{{literals.length}}]
 *  - Constant IRIs: [{{constantIris.length}}]
 *  - Constant strings: [{{constantStrings.length}}]
{{#if description}}
 *
 * {{{description}}}{{/if}}{{#if namespace}}
 *
 * Namespace IRI: [{{namespaceIri}}]{{/if}}{{#if reportBestPracticeCompliance}}
 *
 * Inrupt Best Practice Compliance Report:
 *  - BP-0: {{{complianceReport.bpReport_0}}}
 *  - BP-1: {{{complianceReport.bpReport_1}}}
 *  - BP-2: {{{complianceReport.bpReport_2}}}{{/if}}
 */
package {{javaPackageName}};

import static java.util.ServiceLoader.load;

import org.apache.commons.rdf.api.IRI;

{{#if description}}
/**
 * {{{description}}}{{#if namespaceIri}}
 *
 * Namespace IRI: [{{namespaceIri}}]{{/if}}
 */{{/if}}
public class {{vocabNameUpperCase}} {
    public static final String PREFIX = "{{vocabPrefix}}";
    public static final String NAMESPACE = "{{namespaceIri}}";

    // Fully qualify the RDF instance here to prevent a name clash when
    // generating from the RDF vocabulary (as we want the name of that generated
    // class to be 'RDF' too!).
    private static final org.apache.commons.rdf.api.RDF valueFactory =
        load(org.apache.commons.rdf.api.RDF.class).findFirst()
        .orElseThrow(() -> new RuntimeException("No RDF Commons implementation available - cannot initialise vocabulary [{{vocabNameUpperCase}}]!"));

    public static final IRI NAMESPACE_IRI = valueFactory.createIRI("{{namespaceIri}}");

    public final IRI getNamespaceIri() {
        return NAMESPACE_IRI;
    }

    private static String FULL_IRI(final String localName) {
        return NAMESPACE + localName;
    }{{#if classes}}

    // *****************
    // All the Classes.
    // *****************
    {{#each classes}}

    /**
     *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
     *
     * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
     *
     * See also:{{#each seeAlsos}}
     *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
     *
     * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
     */
    public static final IRI {{nameEscapedForJava}} = valueFactory.createIRI(FULL_IRI("{{{name}}}"));
{{/each}}
{{/if}}{{#if properties}}

    // *******************
    // All the Properties.
    // *******************
    {{#each properties}}

    /**
     *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
     *
     * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
     *
     * See also:{{#each seeAlsos}}
     *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
     *
     * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
     */
    public static final IRI {{nameEscapedForJava}} = valueFactory.createIRI(FULL_IRI("{{{name}}}"));
{{/each}}
{{/if}}{{#if literals}}

    // *******************
    // All the Literals.
    // *******************
    {{#each literals}}

    /**
     *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
     *
     * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
     *
     * See also:{{#each seeAlsos}}
     *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
     *
     * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
     */
    public static final IRI {{nameEscapedForJava}} = valueFactory.createIRI(FULL_IRI("{{{name}}}"));
{{/each}}
{{/if}}{{#if constantStrings}}

    // **************************
    // All the constant strings.
    // **************************
    {{#each constantStrings}}

    /**
     *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
     *
     * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
     *
     * See also:{{#each seeAlsos}}
     *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
     *
     * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
     */
    public static final String {{nameEscapedForJava}} = "{{#each definitions}}{{{valueEscapedForJava}}}{{/each}}";
{{/each}}
{{/if}}{{#if constantIris}}

    // ***********************
    // All the constant IRIs.
    // ***********************
    {{#each constantIris}}

    /**
     *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
     *
     * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
     *
     * See also:{{#each seeAlsos}}
     *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
     *
     * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
     */
    public static final IRI {{nameEscapedForJava}} = valueFactory.createIRI("{{#each definitions}}{{{valueEscapedForJava}}}{{/each}}");
{{/each}}{{/if}} }
