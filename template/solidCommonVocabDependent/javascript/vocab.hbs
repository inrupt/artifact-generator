{{#if license/header}}
{{license/header}}

{{/if}}
/**
 * Generated by the artifact generator [{{generatorName}}], version [{{artifactGeneratorVersion}}]
 * as part of artifact: [{{artifactName}}], version: [{{artifactVersion}}]
 * on '{{generatedTimestamp}}'.
 *
 * {{sourceRdfResources}}
 * The generator detected the following terms in the source vocabulary:
 *  - Classes: [{{classes.length}}]
 *  - Properties: [{{properties.length}}]
 *  - Literals: [{{literals.length}}]
 *  - Constant IRIs: [{{constantIris.length}}]
 *  - Constant strings: [{{constantStrings.length}}]
{{#if description}}
 *
 * {{{description}}}{{/if}}{{#if namespace}}
 *
 * Namespace IRI: [{{namespaceIri}}]{{/if}}{{#if reportBestPracticeCompliance}}
 *
 * Inrupt Best Practice Compliance Report:
 *  - BP-0: {{{complianceReport.bpReport_0}}}
 *  - BP-1: {{{complianceReport.bpReport_1}}}
 *  - BP-2: {{{complianceReport.bpReport_2}}}{{/if}}
 */

// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
const { VocabTerm: _VocabTerm, getLocalStore } = require("@inrupt/solid-common-vocab");
const _DataFactory = require("@rdfjs/data-model");

const { namedNode: _namedNode } = _DataFactory;

function _NS(localName) {
  return _namedNode(`{{namespaceIri}}${localName}`);
}

{{#if description}}
/**
 * {{{description}}}{{#if namespaceIri}}
 *
 * Namespace IRI: [{{namespaceIri}}]{{/if}}
 */{{/if}}
const {{vocabNameUpperCase}} = {
  PREFIX: "{{vocabPrefix}}",
  NAMESPACE: "{{namespaceIri}}",
  PREFIX_AND_NAMESPACE: { "{{vocabPrefix}}": "{{namespaceIri}}" },
  NS: _NS,{{#if classes}}

  // *****************
  // All the Classes.
  // *****************
  {{#each classes}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
   *
   * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
   *
   * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _DataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each isDefinedBys}}
    .addIsDefinedBy(_namedNode("{{isDefinedBy}}")){{/each}}{{#each seeAlsos}}
    .addSeeAlso(_namedNode("{{seeAlso}}")){{/each}}{{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if properties}}

  // *******************
  // All the Properties.
  // *******************
  {{#each properties}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
   *
   * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
   *
   * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _DataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each isDefinedBys}}
    .addIsDefinedBy(_namedNode("{{isDefinedBy}}")){{/each}}{{#each seeAlsos}}
    .addSeeAlso(_namedNode("{{seeAlso}}")){{/each}}{{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if literals}}

  // *******************
  // All the Literals.
  // *******************
  {{#each literals}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
   *
   * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
   *
   * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _DataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each definitions}}{{#if language}}
    .addMessage(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addMessageNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if constantStrings}}

  // **************************
  // All the constant strings.
  // **************************
  {{#each constantStrings}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
   *
   * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
   *
   * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
   */
  {{nameEscapedForLanguage}}: {{#each definitions}}"{{{valueEscapedForJavaScript}}}"{{/each}},
{{/each}}{{/if}}{{#if constantIris}}

  // ***********************
  // All the constant IRIs.
  // ***********************
  {{#each constantIris}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if termDescription}}
   *
   * {{{termDescription}}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBys}}
   *
   * Defined by the vocabulary: {{#each isDefinedBys}}{{isDefinedBy}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}}
   */
  {{nameEscapedForLanguage}}: {{#each definitions}}_namedNode("{{{valueEscapedForJavaScript}}}")
  {{/each}},
{{/each}}{{/if}}
}

{{#if supportBundling}}
export default {{vocabNameUpperCase}};
{{else}}
module.exports = {{vocabNameUpperCase}};
{{/if}}
