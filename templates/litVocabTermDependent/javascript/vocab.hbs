{{#if license/header}}
{{license/header}}

{{/if}}
const { LitVocabTerm, getLocalStore } = require("@inrupt/lit-vocab-term");
const dataFactory = require("@rdfjs/data-model");

const { namedNode } = dataFactory;

/**
  Generated by artifact generator [{{generatorName}}], version [{{artifactGeneratorVersion}}]
  as part of artifact: [{{artifactName}}], version: [{{artifactVersion}}]
  at '{{generatedTimestamp}}'.

  {{sourceRdfResources}}
{{#if description}}

  {{{description}}}
{{/if}}
 */

function _NS(localName) {
  return (namedNode(`{{namespace}}${localName}`));
}

const {{vocabNameUpperCase}} = {
  PREFIX: "{{vocabPrefix}}",
  NAMESPACE: "{{namespace}}",
  PREFIX_AND_NAMESPACE: { "{{vocabPrefix}}": "{{namespace}}" },
  NS: _NS,

{{#if classes}}
  // *****************
  // All the Classes.
  // *****************
  {{#each classes}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(
    _NS("{{{name}}}"),
    dataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}

{{#if properties}}
  // *******************
  // All the Properties.
  // *******************
  {{#each properties}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(
    _NS("{{{name}}}"),
    dataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}

{{#if literals}}
  // *******************
  // All the Literals.
  // *******************
  {{#each literals}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(
    _NS("{{{name}}}"),
    dataFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each definitions}}{{#if language}}
    .addMessage(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addMessageNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}
  //
  // Marker allowing us put commas at the end of all lines above (only the last line does not have a comma).
  //
  END_OF_VOCAB: 'End of vocab.'
}

module.exports = {{vocabNameUpperCase}};
