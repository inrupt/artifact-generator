{{#if license/header}}
{{license/header}}

{{/if}}
/**
  Generated by the artifact generator [{{generatorName}}], version [{{artifactGeneratorVersion}}]
  as part of artifact: [{{artifactName}}], version: [{{artifactVersion}}]
  on '{{generatedTimestamp}}'.

  {{sourceRdfResources}}
{{#if description}}

  {{{description}}}
{{/if}}
 */

// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
import { VocabTerm as _VocabTerm, getLocalStore } from "@inrupt/solid-common-vocab";

import { DataFactory as _DataFactory } from 'rdf-data-factory';
import * as _RDF from 'rdf-js';

const _rdfFactory: _RDF.DataFactory = new _DataFactory();

function _NS(localName: string): _RDF.NamedNode {
  return _rdfFactory.namedNode(`{{namespace}}${localName}`);
}

{{#if description}}
/**
 * {{{description}}}
 */{{/if}}
const {{vocabNameUpperCase}} = {
  PREFIX: "{{vocabPrefix}}",
  NAMESPACE: "{{namespace}}",
  PREFIX_AND_NAMESPACE: { "{{vocabPrefix}}": "{{namespace}}" },
  NS: _NS,{{#if classes}}

  // *****************
  // All the Classes.
  // *****************
  {{#each classes}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if translationDescription}}
   *
   * {{translationDescription}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBy}}
   *
   * Defined by the vocabulary: {{isDefinedBy}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _rdfFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#if isDefinedBy}}
    .addIsDefinedBy(_rdfFactory.namedNode("{{isDefinedBy}}")){{/if}}{{#each seeAlsos}}
    .addSeeAlso(_rdfFactory.namedNode("{{seeAlso}}")){{/each}}{{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if properties}}

  // *******************
  // All the Properties.
  // *******************
  {{#each properties}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if translationDescription}}
   *
   * {{translationDescription}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBy}}
   *
   * Defined by the vocabulary: {{isDefinedBy}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _rdfFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#if isDefinedBy}}
    .addIsDefinedBy(_rdfFactory.namedNode("{{isDefinedBy}}")){{/if}}{{#each seeAlsos}}
    .addSeeAlso(_rdfFactory.namedNode("{{seeAlso}}")){{/each}}{{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if literals}}

  // *******************
  // All the Literals.
  // *******************
  {{#each literals}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if translationDescription}}
   *
   * {{translationDescription}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBy}}
   *
   * Defined by the vocabulary: {{isDefinedBy}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new _VocabTerm(
    _NS("{{{name}}}"),
    _rdfFactory,
    getLocalStore(),
    {{#if ../strict}}true{{else}}false{{/if}}
  ){{#if isDefinedBy}}
    .addIsDefinedBy(_rdfFactory.namedNode("{{isDefinedBy}}")){{/if}}{{#each seeAlsos}}
    .addSeeAlso(_rdfFactory.namedNode("{{seeAlso}}")){{/each}}{{#each labels}}{{#if language}}
    .addLabel(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each comments}}{{#if language}}
    .addComment(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}}{{#each definitions}}{{#if language}}
    .addMessage(`{{{valueEscapedForJavaScript}}}`, "{{language}}"){{else}}
    .addMessageNoLanguage(`{{{valueEscapedForJavaScript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}{{#if constantStrings}}

  // **************************
  // All the constant strings.
  // **************************
  {{#each constantStrings}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if translationDescription}}
   *
   * {{translationDescription}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBy}}
   *
   * Defined by the vocabulary: {{isDefinedBy}}{{/if}}
   */
  {{nameEscapedForLanguage}}: "{{#each definitions}}{{{valueEscapedForJavaScript}}}{{/each}}",
{{/each}}{{/if}}{{#if constantIris}}

  // ***********************
  // All the constant IRIs.
  // ***********************
  {{#each constantIris}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}{{#if translationDescription}}
   *
   * {{translationDescription}}{{/if}}{{#if seeAlsos}}
   *
   * See also:{{#each seeAlsos}}
   *  - {{seeAlso}}{{/each}}{{/if}}{{#if isDefinedBy}}
   *
   * Defined by the vocabulary: {{isDefinedBy}}{{/if}}
   */
  {{nameEscapedForLanguage}}: _NS("{{#each definitions}}{{{valueEscapedForJavaScript}}}{{/each}}"),
{{/each}}{{/if}} };

export default {{vocabNameUpperCase}};
