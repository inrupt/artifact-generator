/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.0]
 * as part of artifact: [@inrupt/generated-vocab-schema-inrupt-ext], version: [1.0.0]
 * on 'Friday, August 20, 2021 10:38 AM'.
 *
 * Vocabulary built from inputs: [./test/resources/vocabs/schema-snippet.ttl, ./test/resources/vocabs/schema-inrupt-ext.ttl].
 *
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e. labels) and translations for comments
 (e.g. for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */

// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
const { VocabTerm: _VocabTerm, getLocalStore } = require("@inrupt/solid-common-vocab");
const _DataFactory = require("@rdfjs/data-model");

const { namedNode: _namedNode } = _DataFactory;

function _NS(localName) {
  return _namedNode(`http://schema.org/${localName}`);
}

/**
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e. labels) and translations for comments
 (e.g. for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */
const SCHEMA_INRUPT_EXT = {
  PREFIX: "schema-inrupt-ext",
  NAMESPACE: "http://schema.org/",
  PREFIX_AND_NAMESPACE: { "schema-inrupt-ext": "http://schema.org/" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A person (alive, dead, undead, or fictional).
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  Person: new _VocabTerm(
    _NS("Person"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_namedNode("https://w3id.org/inrupt/vocab/extension/schema#"))
    .addLabelNoLanguage(`Person`)
    .addLabel(`Person`, "de")
    .addLabel(`Person`, "en")
    .addLabel(`Persona`, "es")
    .addLabel(`La personne`, "fr")
    .addLabel(`Persona`, "it")
    .addCommentNoLanguage(`A person (alive, dead, undead, or fictional).`)
    .addComment(`Eine Person (lebendig, tot, untot oder fiktiv).`, "de")
    .addComment(`Una persona (viva, muerta, no muerta o ficticia).`, "es")
    .addComment(`Une personne (vivante, morte, mort-vivant ou fictive).`, "fr")
    .addComment(`Una persona (viva, morta, non morta o immaginaria).`, "it"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  givenName: new _VocabTerm(
    _NS("givenName"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_namedNode("https://w3id.org/inrupt/vocab/extension/schema#"))
    .addLabelNoLanguage(`givenName`)
    .addLabel(`Vorname`, "de")
    .addLabel(`Given Name`, "en")
    .addLabel(`Nombre de pila`, "es")
    .addLabel(`Prénom`, "fr")
    .addLabel(`Nome di battesimo`, "it")
    .addCommentNoLanguage(`Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.`)
    .addComment(`Vorname. In den USA der Vorname einer Person. Dies kann zusammen mit familyName anstelle der Eigenschaft name verwendet werden.`, "de")
    .addComment(`Nombre de pila. En los EE. UU., El primer nombre de una persona. Esto se puede usar junto con familyName en lugar de la propiedad name.`, "es")
    .addComment(`Prénom. Aux États-Unis, le prénom d’une personne. Ceci peut être utilisé avec familyName au lieu de la propriété name.`, "fr")
    .addComment(`Nome di battesimo. Negli Stati Uniti, il primo nome di una persona. Questo può essere usato insieme a familyName al posto della proprietà name.`, "it"),

  /**
   * Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.
   *
   * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  familyName: new _VocabTerm(
    _NS("familyName"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_namedNode("https://w3id.org/inrupt/vocab/extension/schema#"))
    .addLabelNoLanguage(`familyName`)
    .addLabel(`Nachname`, "de")
    .addLabel(`Family Name`, "en")
    .addLabel(`Apellido`, "es")
    .addLabel(`Nom de famille`, "fr")
    .addLabel(`Cognome`, "it")
    .addCommentNoLanguage(`Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.`)
    .addComment(`Nachname. In den USA der Nachname einer Person. Dies kann zusammen mit givenName anstelle der Eigenschaft name verwendet werden.`, "de")
    .addComment(`Apellido. En los EE.UU., el apellido de una persona. Esto se puede usar junto con givenName en lugar de la propiedad name.`, "es")
    .addComment(`Nom de famille. Aux États-Unis, le nom de famille d’une personne. Ceci peut être utilisé avec GivenName au lieu de la propriété name.`, "fr")
    .addComment(`Cognome. Negli Stati Uniti, il cognome di una persona. Questo può essere usato insieme a givenName al posto della proprietà name.`, "it"),

  /**
   * The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.
   *
   * This term provides descriptions only with no explicit locale.
   */
  addressCountry: new _VocabTerm(
    _NS("addressCountry"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`addressCountry`)
    .addCommentNoLanguage(`The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.`),

}

module.exports = SCHEMA_INRUPT_EXT;
